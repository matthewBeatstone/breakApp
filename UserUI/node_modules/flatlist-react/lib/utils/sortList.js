"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var getObjectDeepKeyValue_1 = __importDefault(require("./getObjectDeepKeyValue"));
var isType_1 = require("./isType");
var defaultSortOptions = {
    caseInsensitive: false,
    descending: false,
    onKey: ''
};
var sortList = function (list, options) {
    if (options === void 0) { options = defaultSortOptions; }
    var listCopy = __spreadArrays(list);
    if (!isType_1.isObject(options) || Object.keys(options).length === 0) {
        options = defaultSortOptions;
    }
    options = __assign(__assign({}, defaultSortOptions), options);
    listCopy.sort(function (first, second) {
        if (options.onKey) {
            first = (isType_1.isObject(first) || isType_1.isArray(first)) ? getObjectDeepKeyValue_1.default(options.onKey, first) : first;
            second = (isType_1.isObject(second) || isType_1.isArray(second)) ? getObjectDeepKeyValue_1.default(options.onKey, second) : second;
        }
        if (options.caseInsensitive) {
            first = isType_1.isString(first) ? first.toLowerCase() : first;
            second = isType_1.isString(second) ? second.toLowerCase() : second;
        }
        return first > second ? (options.descending ? -1 : 1)
            : first < second ? (options.descending ? 1 : -1)
                : 0;
    });
    return listCopy;
};
exports.default = sortList;
//# sourceMappingURL=sortList.js.map