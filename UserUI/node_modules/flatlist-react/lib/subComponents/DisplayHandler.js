"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prop_types_1 = require("prop-types");
var propTypes = {
    display: prop_types_1.shape({
        grid: prop_types_1.bool,
        gridGap: prop_types_1.string,
        gridMinColumnWidth: prop_types_1.string,
        row: prop_types_1.bool,
        rowGap: prop_types_1.string
    }),
    displayGrid: prop_types_1.bool.isRequired,
    displayRow: prop_types_1.bool.isRequired,
    gridGap: prop_types_1.string.isRequired,
    minColumnWidth: prop_types_1.string.isRequired,
    rowGap: prop_types_1.string.isRequired,
    showGroupSeparatorAtTheBottom: prop_types_1.bool.isRequired
};
var defaultProps = {
    display: {
        grid: false,
        gridGap: '20px',
        gridMinColumnWidth: '200px',
        row: false,
        rowGap: '20px'
    }
};
var DisplayHandler = /** @class */ (function (_super) {
    __extends(DisplayHandler, _super);
    function DisplayHandler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.childSpanRef = react_1.createRef();
        _this.state = {
            parentComponent: null
        };
        return _this;
    }
    DisplayHandler.prototype.componentDidMount = function () {
        var current = this.childSpanRef.current;
        if (current) {
            this.setState({ parentComponent: current.parentNode }, this.handleDisplayHandlerProps);
        }
        else {
            console.warn('FlatList: it was not possible to get container\'s ref. Styling will not be possible');
        }
    };
    DisplayHandler.prototype.componentDidUpdate = function (prevProps) {
        this.handleDisplayHandlerProps();
    };
    DisplayHandler.prototype.handleDisplayHandlerProps = function () {
        var parentComponent = this.state.parentComponent;
        if (parentComponent) {
            var _a = this.props, displayGrid = _a.displayGrid, displayRow = _a.displayRow, display = _a.display;
            if (display.grid || displayGrid) {
                this.styleParentGrid(parentComponent);
            }
            else if (display.row || displayRow) {
                this.styleParentRow(parentComponent);
            }
        }
    };
    DisplayHandler.prototype.styleParentGrid = function (parentComponent) {
        var _a = this.props, display = _a.display, displayGrid = _a.displayGrid;
        var infiniteLoader = parentComponent.querySelector('.__infinite-loader');
        if (displayGrid || display.grid) {
            var _b = this.props, gridGap = _b.gridGap, minColumnWidth = _b.minColumnWidth;
            gridGap = display.gridGap || gridGap || defaultProps.display.gridGap;
            minColumnWidth = display.gridMinColumnWidth || minColumnWidth || defaultProps.display.gridMinColumnWidth;
            parentComponent.style.display = 'grid';
            parentComponent.style.gridGap = gridGap;
            parentComponent.style.gridTemplateColumns = "repeat(auto-fill, minmax(" + minColumnWidth + ", 1fr))";
            parentComponent.style.gridTemplateRows = 'auto';
            parentComponent.style.alignItems = 'stretch';
            parentComponent.querySelectorAll('.___list-separator')
                .forEach(function (item) {
                item.style.gridColumn = '1 / -1';
            });
            if (infiniteLoader) {
                infiniteLoader.style.gridColumn = '1 / -1';
            }
        }
        else {
            parentComponent.style.removeProperty('display');
            parentComponent.style.removeProperty('grid-gap');
            parentComponent.style.removeProperty('grid-template-columns');
            parentComponent.style.removeProperty('grid-template-rows');
            parentComponent.style.removeProperty('align-items');
            parentComponent.querySelectorAll('.___list-separator')
                .forEach(function (item) {
                item.style.removeProperty('grid-column');
            });
            if (infiniteLoader) {
                infiniteLoader.style.removeProperty('grid-column');
            }
        }
    };
    DisplayHandler.prototype.styleParentRow = function (parentComponent) {
        var _a = this.props, displayRow = _a.displayRow, display = _a.display, showGroupSeparatorAtTheBottom = _a.showGroupSeparatorAtTheBottom;
        if (displayRow || display.row) {
            var rowGap_1 = this.props.rowGap;
            rowGap_1 = display.rowGap || rowGap_1 || defaultProps.display.rowGap;
            parentComponent.style.display = 'block';
            [].forEach.call(parentComponent.children, function (item) {
                if (!item.classList.contains('__infinite-loader')) {
                    item.style.display = 'block';
                    var nextEl = item.nextElementSibling;
                    if (!showGroupSeparatorAtTheBottom || !nextEl || !nextEl.classList.contains('___list-separator')) {
                        item.style.margin = "0 0 " + rowGap_1;
                    }
                }
            });
        }
        else {
            parentComponent.style.removeProperty('display');
            [].forEach.call(parentComponent.children, function (item) {
                item.style.removeProperty('display');
                item.style.removeProperty('margin');
            });
        }
    };
    DisplayHandler.prototype.render = function () {
        var parentComponent = this.state.parentComponent;
        return (react_1.default.createElement(react_1.default.Fragment, null, !parentComponent && react_1.default.createElement("span", { ref: this.childSpanRef, style: { display: 'none' } })));
    };
    DisplayHandler.propTypes = propTypes;
    DisplayHandler.defaultProps = defaultProps;
    return DisplayHandler;
}(react_1.Component));
exports.default = DisplayHandler;
//# sourceMappingURL=DisplayHandler.js.map