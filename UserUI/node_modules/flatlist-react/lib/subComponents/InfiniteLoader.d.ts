import React, { Component } from 'react';
export interface InfiniteLoaderInterface {
    loadingIndicator: null | (() => JSX.Element) | JSX.Element;
    loadingIndicatorPosition: string;
    hasMore: boolean;
    loadMore: null | (() => void);
}
interface State {
    scrollingContainer: HTMLElement | null;
    loadIndicatorContainer: HTMLDivElement | null;
    loading: boolean;
}
declare class InfiniteLoader extends Component<InfiniteLoaderInterface, State> {
    static propTypes: {
        hasMore: import("prop-types").Validator<boolean>;
        loadMore: import("prop-types").Validator<(...args: any[]) => any>;
        loadingIndicator: import("prop-types").Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
        loadingIndicatorPosition: import("prop-types").Requireable<string>;
    };
    static defaultProps: {
        loadingIndicatorPosition: string;
    };
    state: State;
    loaderContainerRef: React.RefObject<HTMLDivElement>;
    lastScrollTop: number;
    waitingForUpdate: boolean;
    mounted: boolean;
    currentItemsCount: number;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    checkIfListChanged(): void;
    getScrollingContainerChildrenCount: () => number;
    setupScrollingContainerEventsListener: (removeEvent?: boolean) => void;
    checkIfLoadingIsNeeded: () => void;
    render(): JSX.Element;
}
export default InfiniteLoader;
//# sourceMappingURL=InfiniteLoader.d.ts.map