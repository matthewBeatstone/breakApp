import React, { Component } from 'react';
export interface DisplayInterface {
    row: boolean;
    rowGap: string;
    grid: boolean;
    gridGap: string;
    gridMinColumnWidth: string;
}
export interface DisplayHandlerProps {
    displayRow: boolean;
    rowGap: string;
    displayGrid: boolean;
    showGroupSeparatorAtTheBottom?: boolean;
    gridGap: string;
    minColumnWidth: string;
    display: DisplayInterface;
}
interface State {
    parentComponent: HTMLElement | null;
}
declare class DisplayHandler extends Component<DisplayHandlerProps, State> {
    static propTypes: {
        display: import("prop-types").Requireable<import("prop-types").InferProps<{
            grid: import("prop-types").Requireable<boolean>;
            gridGap: import("prop-types").Requireable<string>;
            gridMinColumnWidth: import("prop-types").Requireable<string>;
            row: import("prop-types").Requireable<boolean>;
            rowGap: import("prop-types").Requireable<string>;
        }>>;
        displayGrid: import("prop-types").Validator<boolean>;
        displayRow: import("prop-types").Validator<boolean>;
        gridGap: import("prop-types").Validator<string>;
        minColumnWidth: import("prop-types").Validator<string>;
        rowGap: import("prop-types").Validator<string>;
        showGroupSeparatorAtTheBottom: import("prop-types").Validator<boolean>;
    };
    static defaultProps: {
        display: {
            grid: boolean;
            gridGap: string;
            gridMinColumnWidth: string;
            row: boolean;
            rowGap: string;
        };
    };
    childSpanRef: React.RefObject<HTMLSpanElement>;
    state: State;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Readonly<DisplayHandlerProps>): void;
    handleDisplayHandlerProps(): void;
    styleParentGrid(parentComponent: HTMLElement): void;
    styleParentRow(parentComponent: HTMLElement): void;
    render(): JSX.Element;
}
export default DisplayHandler;
//# sourceMappingURL=DisplayHandler.d.ts.map