import React, { ForwardRefExoticComponent } from 'react';
import { DisplayHandlerProps, DisplayInterface } from './subComponents/DisplayHandler';
import { InfiniteLoaderProps } from './subComponents/InfiniteLoader';
import { GroupOptionsInterface } from './utils/groupList';
import { SearchOptionsInterface } from './utils/searchList';
declare type renderFunc = (item: any, key: number | string) => JSX.Element;
interface GroupInterface extends GroupOptionsInterface {
    separator: JSX.Element | ((g: any, idx: number, label: string) => JSX.Element | null) | null;
    separatorAtTheBottom: boolean;
    sortBy: string;
    sortDescending: boolean;
    sortCaseInsensitive: boolean;
}
interface SortInterface {
    by: string;
    descending: boolean;
    caseInsensitive: boolean;
    groupBy: GroupInterface['sortBy'];
    groupDescending: GroupInterface['sortDescending'];
    groupCaseInsensitive: GroupInterface['sortCaseInsensitive'];
}
interface Props<T> {
    list: T[];
    renderItem: JSX.Element | renderFunc;
    renderWhenEmpty: null | (() => JSX.Element);
    limit: number;
    reversed: boolean;
    wrapperHtmlTag: string;
    group: GroupInterface;
    search: SearchOptionsInterface<T>;
    display: DisplayInterface;
    sort: boolean | SortInterface;
    pagination: InfiniteLoaderProps;
    sortBy: SortInterface['by'];
    sortCaseInsensitive: SortInterface['caseInsensitive'];
    sortDesc: SortInterface['descending'];
    sortGroupBy: GroupInterface['sortBy'];
    sortGroupDesc: GroupInterface['sortDescending'];
    showGroupSeparatorAtTheBottom: GroupInterface['separatorAtTheBottom'];
    groupReversed: GroupInterface['reversed'];
    groupSeparator: GroupInterface['separator'];
    groupBy: GroupInterface['by'];
    groupOf: GroupInterface['limit'];
    displayRow: DisplayHandlerProps['displayRow'];
    rowGap: DisplayHandlerProps['rowGap'];
    displayGrid: DisplayHandlerProps['displayGrid'];
    gridGap: DisplayHandlerProps['gridGap'];
    minColumnWidth: DisplayHandlerProps['minColumnWidth'];
    filterBy: string | ((item: T, idx: number) => boolean);
    searchTerm: SearchOptionsInterface<T>['term'];
    searchBy: SearchOptionsInterface<T>['by'];
    searchOnEveryWord: SearchOptionsInterface<T>['everyWord'];
    searchCaseInsensitive: SearchOptionsInterface<T>['caseInsensitive'];
    hasMoreItems: InfiniteLoaderProps['hasMore'];
    loadMoreItems: null | InfiniteLoaderProps['loadMore'];
    paginationLoadingIndicator: InfiniteLoaderProps['loadingIndicator'];
    paginationLoadingIndicatorPosition: InfiniteLoaderProps['loadingIndicatorPosition'];
}
interface ForwardRefExoticComponentExtended extends ForwardRefExoticComponent<Props<{} | []>> {
    propTypes: object;
}
declare const _default: React.MemoExoticComponent<ForwardRefExoticComponentExtended>;
export default _default;
//# sourceMappingURL=flatlist-react.d.ts.map